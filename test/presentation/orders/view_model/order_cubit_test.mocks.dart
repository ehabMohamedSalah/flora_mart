// Mocks generated by Mockito 5.4.5 from annotations
// in flora_mart/test/presentation/orders/view_model/order_cubit_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:flora_mart/core/api/api_result.dart' as _i5;
import 'package:flora_mart/data/model/order_response/OrderResponse.dart' as _i6;
import 'package:flora_mart/domain/repo_contract/order_repo.dart' as _i2;
import 'package:flora_mart/domain/usecase/order_usecase.dart' as _i3;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i7;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeOrderRepo_0 extends _i1.SmartFake implements _i2.OrderRepo {
  _FakeOrderRepo_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [OrderUsecase].
///
/// See the documentation for Mockito's code generation for more information.
class MockOrderUsecase extends _i1.Mock implements _i3.OrderUsecase {
  MockOrderUsecase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.OrderRepo get repo =>
      (super.noSuchMethod(
            Invocation.getter(#repo),
            returnValue: _FakeOrderRepo_0(this, Invocation.getter(#repo)),
          )
          as _i2.OrderRepo);

  @override
  set repo(_i2.OrderRepo? _repo) => super.noSuchMethod(
    Invocation.setter(#repo, _repo),
    returnValueForMissingStub: null,
  );

  @override
  _i4.Future<_i5.ApiResult<_i6.OrderResponse>> call() =>
      (super.noSuchMethod(
            Invocation.method(#call, []),
            returnValue: _i4.Future<_i5.ApiResult<_i6.OrderResponse>>.value(
              _i7.dummyValue<_i5.ApiResult<_i6.OrderResponse>>(
                this,
                Invocation.method(#call, []),
              ),
            ),
          )
          as _i4.Future<_i5.ApiResult<_i6.OrderResponse>>);
}
